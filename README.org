* Pic midrange code
Helper functions for
- waiting
- LCD connection (HW setup inside)
- eeprom access
- Dallas interface
- Serial
and demo for LCD printing and temperature measurement using Dallas
chip.
* Conventions
- INDF can be used by any procedure to store local data, but it is
  responsible for its callees to be able to do so as well.
- W is used for parameters passing, usually (what else?)
- I use several calls instead of 8x loops. It is shorter. Negative
  side is that stack depth needs to be taken into account
* GPsim needs to create eeprom file
Apparently, gpsim is not able to use programming hex file content to
populate EEPROM. This is workaround to prepare special file.

#+BEGIN_SRC lisp
  (loop
   with res = (make-array 256 :element-type '(unsigned-byte 8) :fill-pointer 0)
   and src = (intel-hex:read-hex-from-file 128000 "demo/lcdn.hex")
   for use in '#1=(t nil . #1#)
   for i from #x4200 to #x42ff
   for val = (aref src i)
   when use do (vector-push-extend val res)
   else do (assert (zerop val))
   finally 
   (intel-hex:write-hex-to-file res "demo/mem.hex" :if-exists :supersede))
#+END_SRC

#+RESULTS:

* 115200 bit-banged uart with 12f675 on a breadboard

Pickit2 was used for programming, serial to usb module to read output.

#+CAPTION: Schematics (breadboard)
#+BEGIN_SRC text
   Serial                          ICSP
   module
           . . . . .   . 1 . . +-- MCLR
           . . . . .   . 2 . . +-- Vdd
    Vdd    . . . 2 +-v-+ 3 . . +-- GND
  DTR/GP5  . . . . +   + . . . +-- GP0/ICSPDAT
  RXI/GP4  . . . . +   + . . . +-- GP1/ICSPCLK
  TXD/MCLR . 1 . . +---+ . . . +-- GP2/AUX
    GND    . . . 3 .   . . . . .
   5V/NC   . . . . .   . . . . .
           . . . . .   . . . . .
#+END_SRC

Results and notes:
- MPLAB fails to save config word
- With PK2CMD it an be saved:
 #+BEGIN_SRC shell :dir ~/staging/pickit/pk2cmdv1.20LinuxMacSource/ :results org
./pk2cmd -P -M -F/opt/compressed/git/lcd-in-pic/demo/uart-demo.hex
#+END_SRC
- Serial term produces garbage unless calibrated (pulse is is 5.6us on scope, not 8)
  #+BEGIN_SRC elisp :var port="/dev/ttyUSB0" :results none
(serial-term port 115200)
(term-line-mode)
#+END_SRC
- Three wires required
- Tried with and without a decoupling capacitor, does not matter for this.
- Pickit2 needs 5 or 6pin male-male cable to use on the breadboard
- Scope is handy if you know what you want to see
- I could probably get away with 9 instructions per pulse, with proper OSCCAL.
